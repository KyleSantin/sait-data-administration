## Understanding and Utilizing a course DB to learn SQL clauses and operations

##SQL Query Writing Order
1. SELECT → choose what to display
2. FROM → pick the tables/views
3. JOIN ... ON → connect tables
4. WHERE → filter rows
5. GROUP BY → group rows
6. HAVING → filter groups
7. ORDER BY → sort rows
8. LIMIT / OFFSET / FETCH (DB-specific) → restrict output

##SQL Query Logical Processing Order
1. FROM
2. WHERE
3. GROUP BY
4. HAVING
5. SELECT
6. DISTINCT
7. ORDER BY
8. LIMIT / OFFSET / FETCH (if supported)

## Practical Exercises:
1. Retrieve the first 5 rows from the product_inventory table.
2. Retrieve products with a price greater than 100.
3. Retrieve products whose category contains 'Electronics'.
4. Retrieve products supplied by 'GadgetWorld'.
5. Use an ampersand substitution variable to prompt for a supplier and return all matching products.

SELECT * FROM product_inventory WHERE ROWNUM <= 5;
SELECT * FROM product_inventory WHERE price >= 100;
SELECT * FROM product_inventory WHERE category = 'Electronics'
SELECT * FROM product_inventory WHERE supplier = 'GadgetWorld'
SELECT * FROM product_inventory WHERE supplier = &supplier_name


## Practical Exercises:
1. Retrieve the first 7 rows from the customer_orders table.
2. Retrieve orders where the total_amount is greater than 300.
3. Retrieve orders where the customer_name contains 'Jack'.
4. Retrieve orders made in February 2023.
5. Use an ampersand substitution variable to prompt for a product and return all matching orders.
  
SELECT * FROM customer_orders WHERE ROWNUM <= 7;
SELECT * FROM customer_orders WHERE total_amount > 300;
SELECT * FROM customer_orders WHERE customer_name LIKE %Jack%;
SELECT * FROM customer_orders WHERE order_date BETWEEN DATE '2023-02-01' AND DATE '2023-02-28';
SELECT * FROM customer_orders WHERE product = &product;


## Practical Exercises
1. Retrieve the first 12 rows from the employees table.
2. Retrieve employees with a salary greater than 50,000.
3. Retrieve employees whose first name starts with 'E'.
4. Retrieve employees hired after January 1, 2020.
5. Use an ampersand substitution variable to prompt for a department_id and return all matching employees
  
SELECT * FROM employees WHERE employees <= 12;
SELECT * FROM employees WHERE salary > 50000;
SELECT * FROM employees WHERE first_name = 'E%';
SELECT * FROM employees WHERE hiring_date DATE '2020-01-01';
SELECT * FROM employees WHERE department_id = &department_id;
